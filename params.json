{"name":"Staticjs","tagline":"Lightweight, feature-rich, promise driven script and static resource loader.","body":"\r\n`static.js` is a full-featured, lightweight resource loading library for\r\nJavaScript.  supports loading of JavaScript, CSS, and image files. It uses\r\nmodern JS features to have a small footprint and excellent performance.\r\n\r\nCurrent size is `~1.28 kB` gzipped, and `~3.9 kB` with all polyfills.\r\n\r\n## Browser support\r\n\r\nThe library uses JavaScript promises, so you'll need to\r\nuse the `loader.compat.js` script if the target browser(s)\r\ndon't already [support promises](http://caniuse.com/#search=promises).\r\n\r\nOther more recent JavaScript methods are used, too. Again, you'll\r\nneed to use the `loader.compat.js` version if the target browsers\r\ndo not support those features.\r\n\r\n- `Array.isArray` [Browser support](http://kangax.github.io/compat-table/es5/#Array.isArray)\r\n- `Array.prototype.forEach` [Browser support](http://kangax.github.io/compat-table/es5/#Array.prototype.forEach)\r\n- `String.prototype.endsWith` [Browser support](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith#Browser_compatibility)\r\n- `localStorage` [Browser support](http://caniuse.com/#search=localstorage)\r\n- `Array.prototype.map` [Browser support](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Browser_compatibility)\r\n- `window.requestAnimationFrame` [Browser support](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame)\r\n\r\n## Usage\r\n\r\n### Bundles\r\n\r\nBundles are useful to load multiple resources at once, and then do something\r\nwhen their loaded.  can use them for CSS, JavaScript, and images. Using it for\r\nall three types of files is great prevent an unstyled flash of anything.\r\n\r\n```javascript\r\n\r\n// Define a bundle.\r\n$static.load(\"//cdn.jsdelivr.net/jquery/3.0.0-alpha1/jquery.min.js\", \"jquery\");\r\n\r\n// Promise when a anonymous bundle is loaded.\r\n$static.load(\"//cdn.jsdelivr.net/bootstrap/3.3.5/css/bootstrap.min.css\").then(function() {\r\n    console.info(\"Bootstrap CSS loaded!\");\r\n});\r\n\r\n// Promise when a named bundle is loaded.\r\n$static.ready(\"jquery\").then(function() {\r\n    $static.load([\r\n        \"//cdn.jsdelivr.net/bootstrap/3.3.5/js/bootstrap.min.js\",\r\n        \"//cdn.jsdelivr.net/bootstrap/3.3.5/css/bootstrap.min.css\",\r\n        \"//cdn.jsdelivr.net/jquery/3.0.0-alpha1/jquery.min.js\"\r\n    ]).then(function() {\r\n        console.info(\"Bootstrap loaded!\");\r\n    });\r\n});\r\n\r\n// Callback when a named bundle is loaded.\r\n$static.ready(\"jquery\", function() {\r\n    console.info(\"jQuery done again!\");\r\n});\r\n\r\n```\r\n\r\n#### Setting a callback before defining a bundle.\r\n\r\nYou can even set a callback before the bundle is defined.\r\nSo the following actually works.\r\n\r\n```javascript\r\n\r\n$static.ready(\"jquery\").then(function() {\r\n    console.log(\"jQuery is loaded!\");\r\n});\r\n\r\n$static.load(\"//cdn.jsdelivr.net/jquery/3.0.0-alpha1/jquery.min.js\", \"jQuery\");\r\n\r\n```\r\n\r\n### Loading as Inline Elements\r\n\r\n```javascript\r\n// Get the resources and inject the contents\r\n// as innerHTML inside their own element.\r\n$static.get(\"//cdn.jsdelivr.net/jquery/3.0.0-alpha1/jquery.min.js\")\r\n    .then(function() {\r\n        console.info(\"jquery.get.done\");\r\n    });\r\n\r\n// Cache the resources in localStorage, and inject\r\n// the content s as innerHTML inside their own element.\r\n$static.cache(\"//cdn.jsdelivr.net/jquery/3.0.0-alpha1/jquery.min.js\")\r\n    .then(function() {\r\n        console.info(\"jquery.cached\");\r\n    });\r\n```\r\n\r\n### Loading Synchronously\r\n\r\nSometimes, it makes sense to load things synchronously.\r\nIn that case, you can use the `sync()` method.\r\n\r\n```javascript\r\n\r\n// Load the resources synchronously.\r\n$static.sync([\r\n    \"//cdn.jsdelivr.net/jquery/3.0.0-alpha1/jquery.min.js\",\r\n    \"//cdn.jsdelivr.net/bootstrap/3.3.5/js/bootstrap.min.js\",\r\n    \"//cdn.jsdelivr.net/bootstrap/3.3.5/css/bootstrap.min.css\"\r\n]);\r\n\r\n// Load the resources synchronously as a bundle.\r\n$static.sync([\r\n    \"//cdn.jsdelivr.net/jquery/3.0.0-alpha1/jquery.min.js\",\r\n    \"//cdn.jsdelivr.net/bootstrap/3.3.5/js/bootstrap.min.js\",\r\n    \"//cdn.jsdelivr.net/bootstrap/3.3.5/css/bootstrap.min.css\"\r\n], \"bootstrap\");\r\n\r\n// Alternate syntax for synchronously loading resources.\r\n$static.load([\r\n    \"//cdn.jsdelivr.net/jquery/3.0.0-alpha1/jquery.min.js\",\r\n    \"//cdn.jsdelivr.net/bootstrap/3.3.5/js/bootstrap.min.js\",\r\n    \"//cdn.jsdelivr.net/bootstrap/3.3.5/css/bootstrap.min.css\"\r\n], \"bootstrap\", true);\r\n\r\n// Clearing cached resources\r\n$static.clear([\r\n    \"//cdn.jsdelivr.net/jquery/3.0.0-alpha1/jquery.min.js\",\r\n    \"//cdn.jsdelivr.net/bootstrap/3.3.5/js/bootstrap.min.js\",\r\n    \"//cdn.jsdelivr.net/bootstrap/3.3.5/css/bootstrap.min.css\"\r\n]);\r\n\r\n```\r\n\r\n### Loading a Resource Multiple Times\r\n\r\nThe promises for each resource are reused, so you can safely attempt\r\nloading any given resource multiple times, and it will result in\r\nonly a single HTTP request if it's already loaded or in the process\r\nof being loaded.\r\n\r\nThe above is even true if a single file is in multiple different\r\nbundles, since individual files are cached on the based on the uri,\r\nnot the bundle name.\r\n\r\n### Known Limitations\r\n\r\n#### Content-Types\r\n\r\nWhen using the `sync()`, `get()`, `cache()` and `load()` methods,\r\nthe each resource needs to have a `.js` or `.css` extension, otherwise\r\nit will be treated as an image.\r\n\r\nThis could be fixed by some fancier AJAX techniques like detecting\r\nthe content-type headers once loaded, but that's not implemented yet.\r\n\r\n#### Loading Images\r\n\r\nRight now, images can only be loaded in the background, but actually\r\nusing them in the DOM is not supported. That is planned in a future update.\r\nUntil then, if you need to use the newly loaded image in the DOM, it requires\r\ndoing something like this:\r\n\r\n```javascript\r\n\r\n$static.load(\"/path/to/image.jpg\").then(function(newImg) {\r\n\r\n    var img = document.querySelector(\"#imageToReplace\");\r\n\r\n    // Changing the source after loaded.\r\n    img.src = newImage.src;\r\n\r\n    // Or, replacing the whole image after loaded.\r\n    img = newImg;\r\n\r\n});\r\n\r\n```\r\n\r\n### Development\r\n\r\nThe build system is GulpJS, so just run `gulp watch` during development.\r\n\r\n### Contributing\r\n\r\n\r\n\r\n### License\r\n\r\n`static.js` is licensed under MPL-2.0.\r\n\r\n### To Do\r\n\r\n- Full test suite\r\n- Better documentation\r\n- `livereload` for development\r\n- JS linting for development\r\n- JS linting for testing\r\n- Media type support for CSS\r\n- Replacing of images in the DOM after loaded\r\n- Support for any other type of file to pre-load (webfonts, etc.)\r\n- Rewrite relative url's inside JS/CSS loaded with `cache()`.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}